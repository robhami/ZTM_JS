A program needs to: 
  1. allocate memory
  2. parse and execute
  
  Javascript engine consists of two parts:
  
  1. Memory heap: memory allocation happens 
  2. Call stack: code read and executed, tells where u r in program
 
 Memory used by assigning variables
 ```
  const a=1;
  const b=10;
  const a=100;
```

Memory leaks happen due unused just laying around, e.g. glovbal variables not cleaned up can cause this. 

Call stack

Reads and executes in order of code then removes line after it executes:

```
console.log('1');
console.log('2');
console.log('3');

```

```
const one =()=>{
  const two = () => {
    console.log('4');
  }
  two();
}
 ```
 
 If call one then:
 
 ```
 >one();
 
 <4
 ```
 
 Call stack first ran one function, then we run two function which runs console.log('4'). 
 Then removes console.log(4), two and one functions in that order. then call stack is empty now. 
 
 Javascript is a single threaded language that is non blocking-
 
 Single threaded means it only has one call stack- it can only do one thing at a time. A call stack is first in last out
